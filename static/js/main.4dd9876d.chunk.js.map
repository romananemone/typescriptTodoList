{"version":3,"sources":["components/TodoItem/TodoItemView.tsx","components/FormDialog/FormDialog.tsx","components/TodoList/TodoListView.tsx","helpers/todoTime.ts","services/serviceApi.ts","helpers/rawTodosFormating.ts","store/slices/todoSlice.ts","helpers/maxIdFromTodosAndArchive.ts","selectors/todos.ts","pages/TodoList/TodoList.tsx","components/TodoArchive/TodoArchiveView.tsx","pages/TodoArchive/TodosArchive.tsx","components/Home/Home.tsx","components/Navigation/Navigation.tsx","components/LangSwitch/LangSwitch.tsx","App.tsx","store/store.ts","i18n.js","index.tsx"],"names":["TodoItemView","props","title","completed","id","startDate","endDate","timeSpent","removeTodoWrapper","toggleTodoWrapper","t","useTranslation","ListGroup","Item","as","className","Form","onClick","Check","readOnly","checked","type","label","Button","variant","xmlns","width","height","fill","viewBox","d","fillRule","memo","FormDialog","buttonText","handler","inputText","useRef","useState","open","setOpen","handleClose","Modal","show","onHide","size","centered","Header","closeButton","Title","Body","Group","Control","ref","rows","Footer","data","current","value","TodoListView","finishedTodos","inProgressTodos","addTodoWrapper","Container","Row","Col","map","todo","moment","require","todoStartTimer","format","finishedToInProgress","restTodoFields","instance","axios","create","baseURL","todoApi","get","then","response","userId","rest","uncompletedTodo","fetchTodos","createAsyncThunk","a","todos","todosSlice","createSlice","name","initialState","isFetching","todosList","todosArchive","reducers","addTodo","state","action","newTodoWithId","archive","length","todosIds","item","archiveIds","Math","max","getMaxId","payload","newTodoWithStartTime","removeTodo","filter","restoreTodo","todoToRestore","find","updatedTodo","toggleTodo","startDateRaw","endDateRaw","timeDifference","diff","duration","endDateFormated","inProgressToCompleted","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","todosSelector","finishedTodosSelector","createSelector","inProgressTodoSelector","TodoList","useSelector","dispatch","useDispatch","useEffect","TodoArchiveView","restoreTodoWrapper","i18n","useMemo","toString","restore","columns","accessor","Cell","language","useTable","getTableProps","getTableBodyProps","headerGroups","prepareRow","Table","striped","bordered","hover","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","style","borderBottom","background","color","fontWeight","render","row","getRowProps","cells","cell","getCellProps","padding","border","TodosArchive","Home","Navigation","key","setKey","location","useLocation","history","useHistory","pathname","push","Nav","activeKey","onSelect","selectedKey","Link","eventKey","LangSwitch","changeLanguage","App","exact","path","store","configureStore","reducer","todosReducer","use","LanguageDetector","initReactI18next","init","debug","fallbackLng","interpolation","escapeValue","resources","en","translation","navigation","home","button","placeholder","ok","cancel","restoreButton","ru","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.4dd9876d.chunk.js","sourcesContent":["import Todo from \"../../interfaces/Todo\";\r\nimport {memo} from \"react\";\r\nimport {ListGroup, Form, Button} from 'react-bootstrap';\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst TodoItemView = (props: Todo): JSX.Element => {\r\n    const {title, completed, id, startDate, endDate, timeSpent, removeTodoWrapper, toggleTodoWrapper} = props;\r\n    const {t} = useTranslation();\r\n\r\n    return (<ListGroup.Item\r\n        as=\"li\"\r\n        className=\"d-flex justify-content-between align-items-start\"\r\n    >\r\n        <Form className=\"ms-2 me-auto\" onClick={() => toggleTodoWrapper(id)}>\r\n            <Form.Check\r\n                readOnly\r\n                checked={completed}\r\n                type='checkbox'\r\n                label={title}\r\n            />\r\n            <div>{startDate ? `${t('todos.startDate')}: ${startDate}` : null }</div>\r\n            <div>{endDate ? `${t('todos.endDate')}: ${endDate}` : null }</div>\r\n            <div>{timeSpent ? `${t('todos.timeSpent')}: ${timeSpent}` : null}</div>\r\n        </Form>\r\n        <Button onClick={() => removeTodoWrapper(id)} variant=\"outline-secondary\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-trash\"\r\n                 viewBox=\"0 0 16 16\">\r\n                <path\r\n                    d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/>\r\n                <path fillRule=\"evenodd\"\r\n                      d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/>\r\n            </svg>\r\n        </Button>\r\n    </ListGroup.Item>)\r\n}\r\n\r\nexport default memo(TodoItemView);","import React, {useRef, useState} from 'react';\r\nimport {Button, Modal, Form} from 'react-bootstrap';\r\nimport FormDialogInterface from \"../../interfaces/FormDialog\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst FormDialog = ({buttonText, title, handler}: FormDialogInterface): JSX.Element => {\r\n    const inputText = useRef<HTMLTextAreaElement>(null);\r\n    const {t} = useTranslation();\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleClickOpen = (): void => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = (): void => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button variant=\"primary\" onClick={handleClickOpen}>\r\n                {buttonText}\r\n            </Button>\r\n            <Modal\r\n                show={open}\r\n                onHide={handleClose}\r\n                size=\"lg\"\r\n                centered\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>\r\n                        {title}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                        <Form.Group className=\"mb-3\">\r\n                            <Form.Control ref={inputText} as=\"textarea\" rows={3}/>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={handleClose}>{t('todos.cancel')}</Button>\r\n                    <Button onClick={() => {\r\n                        const data = inputText?.current?.value;\r\n                        if (data) {\r\n                            handler(data);\r\n                        }\r\n                        handleClose();\r\n                    }}>{t('todos.ok')}</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FormDialog;","import Todos from '../../interfaces/Todos';\r\nimport TodoItemView from \"../TodoItem/TodoItemView\";\r\nimport {Container, Row, Col, ListGroup} from 'react-bootstrap';\r\nimport {useTranslation} from \"react-i18next\";\r\nimport React from \"react\";\r\nimport FormDialog from \"../FormDialog/FormDialog\";\r\nimport {TodoType} from \"../../types/Todo\";\r\n\r\nconst TodoListView = (props: Todos): JSX.Element => {\r\n    const {t} = useTranslation();\r\n    const {finishedTodos, inProgressTodos, addTodoWrapper, removeTodoWrapper, toggleTodoWrapper} = props;\r\n\r\n    return (\r\n        <Container>\r\n            <Row className='m-3'>\r\n                <Col className='d-flex justify-content-center'>\r\n                    <h1>{t('todos.title')}</h1>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col className='d-flex justify-content-center'>\r\n                    <FormDialog buttonText={t('todos.button')} title={t('todos.button')}\r\n                                handler={(title) => addTodoWrapper(title)}/>\r\n                </Col>\r\n            </Row>\r\n            <Row className='m-3'>\r\n                <Col>\r\n                    <ListGroup as='ul'>\r\n                        {inProgressTodos.map((todo: TodoType) =>\r\n                            <TodoItemView\r\n                                key={todo.id}\r\n                                {...todo}\r\n                                removeTodoWrapper={removeTodoWrapper}\r\n                                toggleTodoWrapper={toggleTodoWrapper}/>)}\r\n                    </ListGroup>\r\n                </Col>\r\n                <Col>\r\n                    <ListGroup as='ul'>\r\n                        {finishedTodos.map((todo: TodoType) =>\r\n                            <TodoItemView\r\n                                key={todo.id}\r\n                                {...todo}\r\n                                removeTodoWrapper={removeTodoWrapper}\r\n                                toggleTodoWrapper={toggleTodoWrapper}/>)}\r\n                    </ListGroup>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default TodoListView;","import {RawTodo, TodoInProgress, TodoCompleted} from \"../types/Todo\";\r\nconst moment = require(\"moment\");\r\nrequire(\"moment-duration-format\");\r\n\r\n\r\nexport const todoStartTimer = (todo: RawTodo): TodoInProgress => {\r\n    return {...todo, startDate: moment().format('lll')}\r\n};\r\n\r\nexport const inProgressToCompleted = (todo: any): TodoCompleted => {\r\n    const startDateRaw = moment(todo.startDate);\r\n    const endDateRaw = moment();\r\n    const timeDifference = endDateRaw.diff(startDateRaw);\r\n    const timeSpent = moment.duration(timeDifference).format(\"d [days], h [hours], m [minutes]\");\r\n    const endDateFormated = endDateRaw.format('lll');\r\n\r\n    const updatedTodo = {...todo, endDate: endDateFormated, timeSpent: timeSpent};\r\n    return updatedTodo;\r\n};\r\n\r\nexport const finishedToInProgress = (todo: any): TodoInProgress => {\r\n    const {startDate, endDate, timeSpent, ...restTodoFields} = todo;\r\n    const updatedTodo = todoStartTimer(restTodoFields);\r\n    return updatedTodo;\r\n}","import axios from 'axios';\r\nimport {RawTodo} from '../types/Todo';\r\nimport {rawTodosMapping} from \"../helpers/rawTodosFormating\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://jsonplaceholder.typicode.com/',\r\n});\r\n\r\nexport const todoApi = {\r\n        getTodos() {\r\n            return instance.get<RawTodo[]>('todos?_limit=10').then((response) => {\r\n                const {data} = response;\r\n                const mappedData = rawTodosMapping(data);\r\n                return mappedData;\r\n            });\r\n        },\r\n    }\r\n;\r\n","import {RawTodo, TodoInProgress} from \"../types/Todo\";\r\nimport {todoStartTimer} from \"./todoTime\";\r\n\r\nexport const rawTodosMapping = (todos: Array<RawTodo>): Array<TodoInProgress> => {\r\n    const mappedTodos = todos.map(({userId, ...rest}) => {\r\n        const uncompletedTodo = {...rest, completed: false};\r\n        return todoStartTimer(uncompletedTodo);\r\n    });\r\n    return mappedTodos;\r\n}","import {createSlice, PayloadAction, createAsyncThunk} from '@reduxjs/toolkit'\r\nimport {todoApi} from \"../../services/serviceApi\";\r\nimport {TodoType} from \"../../types/Todo\";\r\nimport {getMaxId} from '../../helpers/maxIdFromTodosAndArchive';\r\nimport {inProgressToCompleted, finishedToInProgress, todoStartTimer} from '../../helpers/todoTime';\r\n\r\ntype TodosSliceReducer = {\r\n    isFetching: boolean;\r\n    todosList: Array<TodoType>;\r\n    todosArchive: Array<TodoType>;\r\n}\r\n\r\nconst initialState: TodosSliceReducer = {\r\n    isFetching: false,\r\n    todosList: [],\r\n    todosArchive: []\r\n}\r\n\r\nexport const fetchTodos = createAsyncThunk(\r\n    'todos/fetchStatus',\r\n    async (): Promise<Array<TodoType>> => {\r\n        const todos = await todoApi.getTodos();\r\n        return todos;\r\n    }\r\n)\r\n\r\nexport const todosSlice = createSlice({\r\n    name: 'todos',\r\n    initialState,\r\n    reducers: {\r\n        addTodo: (state, action: PayloadAction<string>) => {\r\n            const lastTodoId = getMaxId(state.todosList, state.todosArchive);\r\n            const newTodoWithId = {id: lastTodoId + 1, title: action.payload, completed: false};\r\n            const newTodoWithStartTime = todoStartTimer(newTodoWithId);\r\n            return {\r\n                ...state,\r\n                todosList: [...state.todosList, newTodoWithStartTime]\r\n            };\r\n        },\r\n        removeTodo: (state, action: PayloadAction<number>) => {\r\n            return {\r\n                ...state,\r\n                todosList: [...state.todosList.filter(todo => todo.id !== action.payload)],\r\n                todosArchive: [...state.todosArchive, ...state.todosList.filter(todo => todo.id === action.payload)]\r\n            };\r\n        },\r\n        restoreTodo: (state, action: PayloadAction<number>) => {\r\n            const todoToRestore = state.todosArchive.find(todo => todo.id === action.payload);\r\n            const updatedTodo = finishedToInProgress(todoToRestore);\r\n            return {\r\n                ...state,\r\n                todosList: [...state.todosList, {...updatedTodo, completed: false}],\r\n                todosArchive: [...state.todosArchive.filter(todo => todo.id !== action.payload)]\r\n            }\r\n        },\r\n        toggleTodo: (state, action: PayloadAction<number>) => {\r\n            return {\r\n                ...state,\r\n                todosList: [...state.todosList.map(todo => {\r\n                        if (todo.id === action.payload) {\r\n                            if (todo.completed) {\r\n                                return {...finishedToInProgress(todo), completed: false};\r\n                            }\r\n                            if (!todo.completed) {\r\n                                return {...inProgressToCompleted(todo), completed: true};\r\n                            }\r\n                        }\r\n                        return todo;\r\n                    }\r\n                )]\r\n            }\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(fetchTodos.pending,\r\n                (state) => {\r\n                    return {...state, isFetching: true}\r\n                })\r\n            .addCase(fetchTodos.fulfilled, (state, action: PayloadAction<Array<TodoType>>) => {\r\n                return {\r\n                    ...state,\r\n                    isFetching: false,\r\n                    todosList: [...action.payload],\r\n                }\r\n            })\r\n            .addCase(fetchTodos.rejected, (state) => {\r\n                return {...state}\r\n            })\r\n    }\r\n})\r\n\r\nexport const {addTodo, removeTodo, toggleTodo, restoreTodo} = todosSlice.actions\r\n\r\nexport default todosSlice.reducer","import {TodoType} from \"../types/Todo\";\r\n\r\nexport const getMaxId = (todos: Array<TodoType>, archive: Array<TodoType>): number => {\r\n    if (todos.length === 0 && archive.length === 0) return 0;\r\n    const todosIds = todos.map((item: TodoType) => item.id);\r\n    const archiveIds = archive.map((item: TodoType) => item.id);\r\n    const maxId = Math.max(...todosIds, ...archiveIds);\r\n    return maxId;\r\n}","import {createSelector} from 'reselect'\r\nimport {TodoType} from \"../types/Todo\";\r\nimport {RootState} from \"../store/store\";\r\n\r\nconst todosSelector = (state: RootState) => state.todos.todosList;\r\n\r\nexport const finishedTodosSelector = createSelector(\r\n    todosSelector,\r\n    (todos: Array<TodoType>) => todos.filter((todo) => todo.completed)\r\n);\r\n\r\nexport const inProgressTodoSelector = createSelector(\r\n    todosSelector,\r\n    (todos: Array<TodoType>) => todos.filter((todo) => !todo.completed)\r\n);\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from '../../store/store';\r\nimport TodoListView from '../../components/TodoList/TodoListView';\r\nimport {useEffect} from \"react\";\r\nimport {fetchTodos} from '../../store/slices/todoSlice';\r\nimport {finishedTodosSelector, inProgressTodoSelector} from '../../selectors/todos';\r\nimport {addTodo, removeTodo, toggleTodo} from \"../../store/slices/todoSlice\";\r\n\r\nconst TodoList = (): JSX.Element => {\r\n    const todos = useSelector((state: RootState) => state.todos.todosList);\r\n    const finishedTodos = useSelector(finishedTodosSelector);\r\n    const inProgressTodos = useSelector(inProgressTodoSelector);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (todos.length !== 0) return;\r\n        dispatch(fetchTodos());\r\n    }, [])\r\n\r\n    const addTodoWrapper = (title: string) => {\r\n        dispatch(addTodo(title));\r\n    }\r\n\r\n    const removeTodoWrapper = (id: number) => {\r\n        dispatch(removeTodo(id));\r\n    }\r\n\r\n    const toggleTodoWrapper = (id: number) => {\r\n        dispatch(toggleTodo(id));\r\n    }\r\n\r\n    return <TodoListView finishedTodos={finishedTodos}\r\n                         inProgressTodos={inProgressTodos}\r\n                         addTodoWrapper={addTodoWrapper}\r\n                         removeTodoWrapper={removeTodoWrapper}\r\n                         toggleTodoWrapper={toggleTodoWrapper}/>\r\n}\r\n\r\nexport default TodoList;","import {useTable} from 'react-table'\r\nimport React, {useMemo} from 'react';\r\nimport ITodosArchive from '../../interfaces/TodoArchive';\r\nimport {TodoType, ArchivedTodo} from \"../../types/Todo\";\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {Button, Table} from \"react-bootstrap\";\r\n\r\nconst TodoArchiveView = ({todosArchive, restoreTodoWrapper}: ITodosArchive) => {\r\n    const {t, i18n} = useTranslation();\r\n    const data: Array<ArchivedTodo> = useMemo(() => {\r\n        return todosArchive.map((todo: TodoType) => ({\r\n            ...todo,\r\n            completed: todo.completed.toString(),\r\n            restore: todo.id\r\n        }))\r\n    }, [todosArchive]);\r\n\r\n    const columns: any = useMemo(\r\n        () => [\r\n            {\r\n                Header: 'ID',\r\n                accessor: 'id',\r\n            },\r\n            {\r\n                Header: t('archive.title'),\r\n                accessor: 'title',\r\n            },\r\n            {\r\n                Header: t('archive.completed'),\r\n                accessor: 'completed',\r\n            },\r\n            {Header: t('archive.startDate'), accessor: 'startDate'},\r\n            {Header: t('archive.endDate'), accessor: 'endDate'},\r\n            {Header: t('archive.timeSpent'), accessor: 'timeSpent'},\r\n            {\r\n                Header: t('archive.restore'),\r\n                accessor: 'restore',\r\n                Cell: ({value}: any) => (\r\n                    <Button onClick={() => restoreTodoWrapper(value)}>\r\n                        {t('archive.restoreButton')}\r\n                    </Button>\r\n                ),\r\n            }\r\n        ],\r\n        [i18n.language]\r\n    )\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n    } = useTable({columns, data});\r\n\r\n    return (\r\n        <div className='p-4'>\r\n            <Table striped bordered hover size=\"sm\" {...getTableProps()}>\r\n                <thead>\r\n                {headerGroups.map(headerGroup => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map(column => (\r\n                            <th\r\n                                {...column.getHeaderProps()}\r\n                                style={{\r\n                                    borderBottom: 'solid 3px red',\r\n                                    background: 'aliceblue',\r\n                                    color: 'black',\r\n                                    fontWeight: 'bold',\r\n                                }}\r\n                            >\r\n                                {column.render('Header')}\r\n                            </th>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                {rows.map(row => {\r\n                    prepareRow(row)\r\n                    return (\r\n                        <tr {...row.getRowProps()}>\r\n                            {row.cells.map(cell => {\r\n                                return (\r\n                                    <td\r\n                                        {...cell.getCellProps()}\r\n                                        style={{\r\n                                            padding: '10px',\r\n                                            border: 'solid 1px gray',\r\n                                            background: 'papayawhip',\r\n                                        }}\r\n                                    >\r\n                                        {cell.render('Cell')}\r\n                                    </td>\r\n                                )\r\n                            })}\r\n                        </tr>\r\n                    )\r\n                })}\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoArchiveView;","import {useSelector} from \"react-redux\";\r\nimport {RootState} from '../../store/store';\r\nimport TodoArchiveView from \"../../components/TodoArchive/TodoArchiveView\";\r\nimport {restoreTodo} from '../../store/slices/todoSlice';\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst TodosArchive = (): JSX.Element => {\r\n    const todosArchive = useSelector((state: RootState) => state.todos.todosArchive);\r\n    const dispatch = useDispatch();\r\n\r\n    const restoreTodoWrapper = (todo: number) => {\r\n        dispatch(restoreTodo(todo));\r\n    }\r\n    return <TodoArchiveView todosArchive={todosArchive} restoreTodoWrapper={restoreTodoWrapper} />\r\n}\r\n\r\nexport default TodosArchive;","import {useTranslation} from \"react-i18next\";\r\n\r\nconst Home = (): JSX.Element => {\r\n    const {t} = useTranslation();\r\n    return <h1 className='text-center'>{t('home.title')}</h1>\r\n}\r\n\r\nexport default Home;","import {Nav} from 'react-bootstrap';\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {useLocation, useHistory} from \"react-router-dom\";\r\nimport {useTranslation} from 'react-i18next';\r\n\r\nconst Navigation = (): JSX.Element => {\r\n    const [key, setKey] = useState('/');\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const {t} = useTranslation();\r\n\r\n    useEffect(() => {\r\n        switch (location.pathname) {\r\n            case '/todos':\r\n                setKey('/todos');\r\n                break;\r\n            case '/table':\r\n                setKey('/archive');\r\n                break;\r\n            default:\r\n                setKey('/');\r\n                break;\r\n        }\r\n    }, [history])\r\n\r\n    useEffect(() => {\r\n        history.push(key);\r\n    }, [key])\r\n\r\n    return (\r\n        <Nav  variant=\"pills\" activeKey={key} onSelect={(selectedKey) => {\r\n            if (selectedKey) {\r\n                setKey(selectedKey)\r\n            }\r\n        }}>\r\n            <Nav.Item>\r\n                <Nav.Link eventKey=\"/\">{t('navigation.home')}</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n                <Nav.Link eventKey=\"/todos\">{t('navigation.todos')}</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n                <Nav.Link eventKey=\"/archive\">{t('navigation.archive')}</Nav.Link>\r\n            </Nav.Item>\r\n        </Nav>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import {Nav} from 'react-bootstrap';\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {useTranslation} from 'react-i18next';\r\n\r\nconst LangSwitch = (): JSX.Element => {\r\n    const [key, setKey] = useState('en');\r\n    const {i18n} = useTranslation();\r\n\r\n    const changeLanguage = (language: string) => {\r\n        i18n.changeLanguage(language);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setKey('en')\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        changeLanguage(key)\r\n    }, [key])\r\n\r\n    return (\r\n        <Nav variant=\"pills\" activeKey={key} onSelect={(selectedKey) => {\r\n            if (selectedKey) {\r\n                setKey(selectedKey)\r\n            }\r\n        }}>\r\n            <Nav.Item>\r\n                <Nav.Link eventKey=\"en\">EN</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n                <Nav.Link eventKey=\"ru\">RU</Nav.Link>\r\n            </Nav.Item>\r\n        </Nav>\r\n    )\r\n}\r\n\r\nexport default LangSwitch;","import React from 'react';\nimport TodoList from \"./pages/TodoList/TodoList\";\nimport TodosArchive from \"./pages/TodoArchive/TodosArchive\";\nimport Home from './components/Home/Home';\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport LangSwitch from \"./components/LangSwitch/LangSwitch\";\n\nfunction App(): JSX.Element {\n    return (\n        <div>\n            <Router>\n                <div className='d-flex justify-content-around p-3'>\n                    <Navigation/>\n                    <LangSwitch/>\n                </div>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Home/>\n                    </Route>\n                    <Route exact path=\"/todos\">\n                        <TodoList/>\n                    </Route>\n                    <Route exact path=\"/archive\">\n                        <TodosArchive/>\n                    </Route>\n                </Switch>\n            </Router>\n        </div>\n    )\n}\n\nexport default App;\n","import {configureStore} from '@reduxjs/toolkit'\r\nimport todosReducer from \"./slices/todoSlice\";\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        todos: todosReducer,\r\n    },\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch","import i18n from 'i18next';\r\nimport {initReactI18next} from 'react-i18next';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\n\r\ni18n\r\n    .use(LanguageDetector)\r\n    .use(initReactI18next)\r\n    .init({\r\n        debug: true,\r\n        fallbackLng: 'en',\r\n        interpolation: {\r\n            escapeValue: false,\r\n        },\r\n        resources: {\r\n            en: {\r\n                translation: {\r\n                    navigation: {home: 'Home', todos: 'Todos', archive: 'Archive'},\r\n                    home: {\r\n                        title: 'Todo list with typescript, storybook, i18next, redux-toolkit',\r\n                    },\r\n                    todos: {\r\n                        title: 'Todo List',\r\n                        button: 'Add new todo',\r\n                        startDate: 'Start date',\r\n                        endDate: 'End date',\r\n                        timeSpent: 'Time spent',\r\n                        placeholder: 'Enter todo text',\r\n                        ok: 'Ok',\r\n                        cancel: 'Cancel'\r\n                    },\r\n                    archive: {\r\n                        title: 'Title',\r\n                        completed: 'Completed',\r\n                        startDate: 'Start date',\r\n                        endDate: 'End date',\r\n                        timeSpent: 'Time spent',\r\n                        restore: 'Restore from archive',\r\n                        restoreButton: 'Restore'\r\n                    }\r\n                }\r\n            },\r\n            ru: {\r\n                translation: {\r\n                    navigation: {home: 'Главная', todos: 'Тодо', archive: 'Архив'},\r\n                    home: {\r\n                        title: 'Тодо лист с использованием технологий typescript, storybook, i18next, redux-toolkit',\r\n                    },\r\n                    todos: {\r\n                        title: 'Список тодо',\r\n                        button: 'Добавить тодо',\r\n                        placeholder: 'Введите тело тодо',\r\n                        startDate: 'Дата начала',\r\n                        endDate: 'Дата завершения',\r\n                        timeSpent: 'Затраченное время',\r\n                        ok: 'Ок',\r\n                        cancel: 'Отмена'\r\n                    },\r\n                    archive: {\r\n                        title: 'Название',\r\n                        completed: 'Завершен',\r\n                        startDate: 'Дата начала',\r\n                        endDate: 'Дата завершения',\r\n                        timeSpent: 'Затраченное время',\r\n                        restore: 'Восстановить из архива',\r\n                        restoreButton: 'Восстановить'\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\nexport default i18n;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {store} from './store/store'\nimport {Provider} from 'react-redux'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './i18n';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}